#! /usr/bin/env ruby

require "pcap/savefile"

require "stringio"
require "dbus"
require "pp"

class EthernetHeader
  def initialize(io)
    @destination = io.read(6)
    @source = io.read(6)
    @type = io.read(2).unpack("n")[0]
    fail unless @type == 0x0800
  end
end

class IpHeader
  def initialize(io)
    header = io.read(20)
    version_length = header[0]
    version = version_length >> 4
    length = (version_length & 0x0f) * 4
    fail unless version == 4 and length == 20
    protocol = header[9]
    fail unless protocol == 6   # TCP
  end
end

class TcpHeader
  def initialize(io)
    header = io.read(20)
    data_offset = (header[12] >> 4) * 4
#    print data_offset
    optional_header = io.read(data_offset - 20)
  end
end

io = ARGF
header = Pcap::Savefile::GlobalHeader.from_io(io)
p header
while not io.eof? do
  packet = Pcap::Savefile::Packet.from_io(io)
  sio = StringIO.new(packet.data)
  eh = EthernetHeader.new(sio)
  ih = IpHeader.new(sio)
  th = TcpHeader.new(sio)
  payload = sio.read
  next if payload.empty? or payload == "\0"
  next if payload =~ /\A[A-Z].*\r\n\z/ # authentication part
#  pp payload
#  puts payload.unpack "H*"
  msg, size = DBus::Message.new.unmarshall_buffer(payload)
  pp msg
end
